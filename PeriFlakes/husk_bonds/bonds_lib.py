# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_bonds_lib', [dirname(__file__)])
        except ImportError:
            import _bonds_lib
            return _bonds_lib
        if fp is not None:
            try:
                _mod = imp.load_module('_bonds_lib', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _bonds_lib = swig_import_helper()
    del swig_import_helper
else:
    import _bonds_lib
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_bonds_lib.KERNEL_MAP_MAX_swigconstant(_bonds_lib)
KERNEL_MAP_MAX = _bonds_lib.KERNEL_MAP_MAX

_bonds_lib.KERNEL_INP_MAX_swigconstant(_bonds_lib)
KERNEL_INP_MAX = _bonds_lib.KERNEL_INP_MAX

_bonds_lib.KERNEL_OUTP_MAX_swigconstant(_bonds_lib)
KERNEL_OUTP_MAX = _bonds_lib.KERNEL_OUTP_MAX

_bonds_lib.KERNEL_OUT_MAP_MAX_swigconstant(_bonds_lib)
KERNEL_OUT_MAP_MAX = _bonds_lib.KERNEL_OUT_MAP_MAX

_bonds_lib.KERNEL_NAME_MAX_swigconstant(_bonds_lib)
KERNEL_NAME_MAX = _bonds_lib.KERNEL_NAME_MAX
class inp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, inp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, inp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["field_number"] = _bonds_lib.inp_t_field_number_set
    __swig_getmethods__["field_number"] = _bonds_lib.inp_t_field_number_get
    if _newclass:
        field_number = _swig_property(_bonds_lib.inp_t_field_number_get, _bonds_lib.inp_t_field_number_set)
    __swig_setmethods__["map_num"] = _bonds_lib.inp_t_map_num_set
    __swig_getmethods__["map_num"] = _bonds_lib.inp_t_map_num_get
    if _newclass:
        map_num = _swig_property(_bonds_lib.inp_t_map_num_get, _bonds_lib.inp_t_map_num_set)
    __swig_setmethods__["name"] = _bonds_lib.inp_t_name_set
    __swig_getmethods__["name"] = _bonds_lib.inp_t_name_get
    if _newclass:
        name = _swig_property(_bonds_lib.inp_t_name_get, _bonds_lib.inp_t_name_set)

    def __init__(self):
        this = _bonds_lib.new_inp_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bonds_lib.delete_inp_t
    __del__ = lambda self: None
inp_t_swigregister = _bonds_lib.inp_t_swigregister
inp_t_swigregister(inp_t)

class outp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, outp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, outp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rank"] = _bonds_lib.outp_t_rank_set
    __swig_getmethods__["rank"] = _bonds_lib.outp_t_rank_get
    if _newclass:
        rank = _swig_property(_bonds_lib.outp_t_rank_get, _bonds_lib.outp_t_rank_set)
    __swig_setmethods__["nmap"] = _bonds_lib.outp_t_nmap_set
    __swig_getmethods__["nmap"] = _bonds_lib.outp_t_nmap_get
    if _newclass:
        nmap = _swig_property(_bonds_lib.outp_t_nmap_get, _bonds_lib.outp_t_nmap_set)
    __swig_setmethods__["map_nums"] = _bonds_lib.outp_t_map_nums_set
    __swig_getmethods__["map_nums"] = _bonds_lib.outp_t_map_nums_get
    if _newclass:
        map_nums = _swig_property(_bonds_lib.outp_t_map_nums_get, _bonds_lib.outp_t_map_nums_set)
    __swig_setmethods__["name"] = _bonds_lib.outp_t_name_set
    __swig_getmethods__["name"] = _bonds_lib.outp_t_name_get
    if _newclass:
        name = _swig_property(_bonds_lib.outp_t_name_get, _bonds_lib.outp_t_name_set)

    def __init__(self):
        this = _bonds_lib.new_outp_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bonds_lib.delete_outp_t
    __del__ = lambda self: None
outp_t_swigregister = _bonds_lib.outp_t_swigregister
outp_t_swigregister(outp_t)

class kernel_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, kernel_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, kernel_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nmap"] = _bonds_lib.kernel_t_nmap_set
    __swig_getmethods__["nmap"] = _bonds_lib.kernel_t_nmap_get
    if _newclass:
        nmap = _swig_property(_bonds_lib.kernel_t_nmap_get, _bonds_lib.kernel_t_nmap_set)
    __swig_setmethods__["maps"] = _bonds_lib.kernel_t_maps_set
    __swig_getmethods__["maps"] = _bonds_lib.kernel_t_maps_get
    if _newclass:
        maps = _swig_property(_bonds_lib.kernel_t_maps_get, _bonds_lib.kernel_t_maps_set)
    __swig_setmethods__["ninp"] = _bonds_lib.kernel_t_ninp_set
    __swig_getmethods__["ninp"] = _bonds_lib.kernel_t_ninp_get
    if _newclass:
        ninp = _swig_property(_bonds_lib.kernel_t_ninp_get, _bonds_lib.kernel_t_ninp_set)
    __swig_setmethods__["inp"] = _bonds_lib.kernel_t_inp_set
    __swig_getmethods__["inp"] = _bonds_lib.kernel_t_inp_get
    if _newclass:
        inp = _swig_property(_bonds_lib.kernel_t_inp_get, _bonds_lib.kernel_t_inp_set)
    __swig_setmethods__["noutp"] = _bonds_lib.kernel_t_noutp_set
    __swig_getmethods__["noutp"] = _bonds_lib.kernel_t_noutp_get
    if _newclass:
        noutp = _swig_property(_bonds_lib.kernel_t_noutp_get, _bonds_lib.kernel_t_noutp_set)
    __swig_setmethods__["outp"] = _bonds_lib.kernel_t_outp_set
    __swig_getmethods__["outp"] = _bonds_lib.kernel_t_outp_get
    if _newclass:
        outp = _swig_property(_bonds_lib.kernel_t_outp_get, _bonds_lib.kernel_t_outp_set)
    __swig_setmethods__["name"] = _bonds_lib.kernel_t_name_set
    __swig_getmethods__["name"] = _bonds_lib.kernel_t_name_get
    if _newclass:
        name = _swig_property(_bonds_lib.kernel_t_name_get, _bonds_lib.kernel_t_name_set)
    __swig_setmethods__["eval"] = _bonds_lib.kernel_t_eval_set
    __swig_getmethods__["eval"] = _bonds_lib.kernel_t_eval_get
    if _newclass:
        eval = _swig_property(_bonds_lib.kernel_t_eval_get, _bonds_lib.kernel_t_eval_set)

    def __init__(self):
        this = _bonds_lib.new_kernel_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _bonds_lib.delete_kernel_t
    __del__ = lambda self: None
kernel_t_swigregister = _bonds_lib.kernel_t_swigregister
kernel_t_swigregister(kernel_t)


def kernel_outps_len(ke, l_edge):
    return _bonds_lib.kernel_outps_len(ke, l_edge)
kernel_outps_len = _bonds_lib.kernel_outps_len

def kernel_outp_len(ke, ou, l_edge):
    return _bonds_lib.kernel_outp_len(ke, ou, l_edge)
kernel_outp_len = _bonds_lib.kernel_outp_len

def kernel_inps_len(ke, l_edge):
    return _bonds_lib.kernel_inps_len(ke, l_edge)
kernel_inps_len = _bonds_lib.kernel_inps_len

def kernel_outp_ndof(ke, ou, l_edge):
    return _bonds_lib.kernel_outp_ndof(ke, ou, l_edge)
kernel_outp_ndof = _bonds_lib.kernel_outp_ndof
# This file is compatible with both classic and new-style classes.

cvar = _bonds_lib.cvar

